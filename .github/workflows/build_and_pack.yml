# This is a basic workflow to help you get started with Actions

name: Build and Pack

# Controls when the action will run. 
on:
  # Triggers the workflow on push or pull request events but only for the master branch
  [push, pull_request]

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains build for 18.04 and 20.04
  bionic-build:
    # The type of runner that the job will run on
    runs-on: ubuntu-18.04

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2

      # Runs a single command using the runners shell
      - name: Build
        run: mkdir build && cd build && cmake .. && cmake --build .  

  focal-build:
    # The type of runner that the job will run on
    runs-on: ubuntu-20.04
    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2

      # Runs a single command using the runners shell
      - name: Build
        run: mkdir build && cd build && cmake .. && cmake --build .   

  bionic-pack:
    needs: bionic-build
    runs-on: ubuntu-18.04
    steps:
      - uses: actions/checkout@v2
      - name: Pack
        run: mkdir build && cd build && cmake .. && cmake --build . && cpack
      - name: Upload artifacts
        uses: actions/upload-artifact@v2
        with: 
          name: bionic-cmake_tutorial
          path: build/cmake_tutorial_*.deb
      - name: Download artifacts
        uses: actions/download-artifact@v2
 
  focal-pack:
    needs: focal-build
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v2
      - name: Pack
        run: mkdir build && cd build && cmake .. && cmake --build . && cpack
      - name: Upload artifacts
        uses: actions/upload-artifact@v2
        with: 
          name: focal-cmake_tutorial
          path: build/cmake_tutorial_*.deb
      - name: Download artifacts
        uses: actions/download-artifact@v2
  sonarcloud:
    runs-on: ubuntu-latest
    env:
      SONAR_SCANNER_VERSION: 4.6.1.2450
      SONAR_SERVER_URL: "https://sonarcloud.io"
      BUILD_WRAPPER_OUT_DIR: build_wrapper_output_directory
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
    steps:
    - uses: actions/checkout@v2
      with:
        fetch-depth: 0

    - name: Install Dependencies
      run: sudo apt install gcc-multilib g++-multilib

    - name: Set up JDK
      uses: actions/setup-java@v1
      with:
        java-version: 11

    - name: Cache SonarCloud packages
      uses: actions/cache@v1
      with:
        path: ~/.sonar/cache
        key: ${{ runner.os }}-sonar
        restore-keys: ${{ runner.os }}-sonar

    - name: Download and set up sonar-scanner
      env:
        SONAR_SCANNER_DOWNLOAD_URL: https://binaries.sonarsource.com/Distribution/sonar-scanner-cli/sonar-scanner-cli-${{ env.SONAR_SCANNER_VERSION }}-linux.zip
      run: |
        mkdir -p $HOME/.sonar
        curl -sSLo $HOME/.sonar/sonar-scanner.zip ${{ env.SONAR_SCANNER_DOWNLOAD_URL }}
        unzip -o $HOME/.sonar/sonar-scanner.zip -d $HOME/.sonar/
        echo "$HOME/.sonar/sonar-scanner-${{ env.SONAR_SCANNER_VERSION }}-linux/bin" >> $GITHUB_PATH

    - name: Download and set up build-wrapper
      env:
        BUILD_WRAPPER_DOWNLOAD_URL: ${{ env.SONAR_SERVER_URL }}/static/cpp/build-wrapper-linux-x86.zip
      run: |
        curl -sSLo $HOME/.sonar/build-wrapper-linux-x86.zip ${{ env.BUILD_WRAPPER_DOWNLOAD_URL }}
        unzip -o $HOME/.sonar/build-wrapper-linux-x86.zip -d $HOME/.sonar/
        echo "$HOME/.sonar/build-wrapper-linux-x86" >> $GITHUB_PATH

    - name: Run build-wrapper
      run: |
        cmake .
        build-wrapper-linux-x86-64 --out-dir ${{ env.BUILD_WRAPPER_OUT_DIR }} make

    - name: Run sonar-scanner
      # Don't run sonar-scanner on builds originating from forks due to secrets not being available
      run: >
        [ -z "$SONAR_TOKEN" ] || sonar-scanner
        --define sonar.organization=pllee4
        --define sonar.projectName=cmake-tutorial
        --define sonar.projectKey=cmake-tutorial
        --define sonar.sources=src
        --define sonar.cfamily.gcov.reportsPath=.
        --define sonar.cfamily.cache.enabled=false
        --define sonar.cfamily.threads=2
        --define sonar.cfamily.build-wrapper-output="${{ env.BUILD_WRAPPER_OUT_DIR }}"
        --define sonar.host.url="${{ env.SONAR_SERVER_URL }}"
